INSTALL
-------

In the Makefile in the top level directory there are configuration options.
If one is using `oshcc` to compile the OpenSHMEM version, no modification to
the Makefile should be required. 

The available options includes COMM, which can be selected between
`-DUSE_MPI3` to use MPI single sided communication and -DUSE_SHMEM to use
OpenSHMEM communication. There is also a compiler option, selections for
this includes mpicc, oshcc, cray, and sgi. Select the compiler appropriate
to your machine. There is also a DEBUG option.  Uncomment that line to
enable a debug build.

There is also a USE_PREFETCH option. This will use non-blocking APIs to
improve communication/computation overlap.

Typing `make -j` will build all the source and produce a final executable
called ssca1. This version of ssca1 takes no flags. The size of the problem
is controlled with the env variable SCALE. The default is 22.0. This number
is set up so that increasing the SCALE by 1 should double the execution
time, all other parameters being equal.



INTERPRETING RESULTS
---------------------

When running SSCA1 the results should be similar to the following:

-----
  Running with OpenMP, thread count: 1
  Running with OpenMP, thread count: 1
  Running with OpenSHMEM, npes = 2
  Disabling OpenSHMEM prefetching
  HPCS SSCA #1 Bioinformatics Sequence Alignment Executable Specification:
  Running...
  Using seed 2613174141
  
  Scalable Data Generator - genScalData() beginning execution...
  Inserting sequence ACDEFG*IDENTICAL*HIKLMN in location 9674
  Inserting sequence ACDEFG*MISQRMATCHES*HIKLMN in location 3989
  Inserting sequence ACDEFG*STARTGAPMIDSTEND*HIKLMN in location 29873
  Inserting sequence MNLKIH*IDENTICAL*GFEDCA in location 18789
  Inserting sequence MNLKIH*MISRQMATCHES*GFEDCA in location 14384
  Inserting sequence MNLKIH*STARTMIDSTGAPEND*GFEDCA in location 23040
  
      Elapsed time: 0 hour(s), 0 minute(s), 0 second(s), 131 milliseconds,  69 micro second(s).
  
     Length of main sequence in codons: 32846
    Length of match sequence in codons: 32846
    Weight for exactly matching codons: 5
             Weight for similar codons: 4
          Weight for dissimilar codons: -3
                Penalty to start a gap: 5
       Penalty for each codon in a gap: 2
  
  Begining Kernel 1 execution.
  
      Elapsed time: 0 hour(s), 17 minute(s), 25 second(s), 691 milliseconds,  138 micro second(s).
  
  Begining Kernel 2 execution.
  Could not find sequence 93.
  
      Elapsed time: 0 hour(s), 0 minute(s), 0 second(s), 36 milliseconds,  165 micro second(s).
  
  Found 100 acceptable alignments with scores from 55 to 24.
  
  Starting   Amino     Codon           Ending
  position   acids     bases           position
  
  verifyAlignment 0, succeeded; score 55:
     9680  *IDENTICAL*  tgaatagacgagaacacgatatgcgcgctgtga     9690
    18795  *IDENTICAL*  tgaatagacgagaacacgatatgcgcgctgtga    18805
  
  verifyAlignment 1, succeeded; score 54:
     3995  *MISQRMATCHES*  tgaatgataagccagaggatggcgacgtgccacgagagctga     4008
    14390  *MISRQMATCHES*  tgaatgataagcaggcagatggcgacgtgccacgagagctga    14403
  
  verifyAlignment 2, succeeded; score 53:
    29879  *STARTGAPMIDST---END*  tgaagcacggcgaggacgggggcgccgatgatagacagcacg---------gagaacgactga    29896
    23046  *START---MIDSTGAPEND*  tgaagcacggcgaggacg---------atgatagacagcacgggggcgccggagaacgactga    23063
  
  verifyAlignment 3, succeeded; score 35:
    24393  DLVVQGFS  gacctggttgtacagggtttctct    24400
    21867  DLVVQGFS  gacctggtcgtgcagggatttagt    21874
  
  verifyAlignment 4, succeeded; score 33:
    21104  SSRSVHQAG*VRG  tcctcgcggtccgttcatcaggcggggtgagtacgggga    21116
    28586  SSRS---AG*VRG  tcttcgagaagt---------gcggggtaggtaaggggc    28595
  
  verifyAlignment 5, succeeded; score 31:
    14030  AQSVSRWSVLC  gctcagagcgtaagccgatggtcagttctttgt    14040
    10939  ARSVSR-SVLC  gcccgaagcgtcagccga---agtgttttgtgt    10948
  
  verifyAlignment 6, succeeded; score 31:
    24401  IS*KAHR  atttcctagaaggctcaccgg    24407
    18575  IS*KAHR  atctcctaaaaggcgcatcgg    18581
  
  verifyAlignment 7, succeeded; score 30:
     7857  NNRGPLLGC  aataaccgtggcccgttgttgggatgc     7865
    13336  NYRGPLLGC  aactatagagggccgcttttagggtgt    13344
  
  verifyAlignment 8, succeeded; score 30:
    24013  HVLRPSARLAVR  cacgtattgcgtccgtctgcgcgccttgccgttcgc    24024
    13497  HVLRHSTRLASR  cacgtacttaggcactctacccgtctcgcgtcgcgg    13508
  
  verifyAlignment 9, succeeded; score 29:
      419  TSRYSED  actagccgatactcagaggac      425
    17540  TSRYSED  acatcgcgttattccgaagac    17546
-----


Kernel 1 is the relevant benchmark number. The Scalable Data Generator and
the Kernel 2 times are informational only. Kernel 2 verifies the results of
Kernel 1. The first three results should be, in order, "*IDENTICAL*",
*MISQRMATCHES*, *STARTGAPMIDST---END*, with scores of 55, 54, and 53
respectively. If the end result is not these values then the underlying
implementation of OpenSHMEM is faulty. Verifications below these sequences
are based on random chance, however they should still be in order by score.
The sort used to arrange these scores is not stable.

It should be noted, increasing the number of remote nodes while keeping
SCALE the same will result in a slow down. This is because SCALE creates a
problem size N, and each node gets M elements for M=N/n_ranks. Adding more
ranks reduces the size of M, resulting in more remote operations to complete
the benchmark. Increasing SCALE by 1 when doubling the number of ranks will
result in a similar run time.

